// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class GlobalStats extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type GlobalStats must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("GlobalStats", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get_in_block("GlobalStats", id.toHexString())
    );
  }

  static load(id: Bytes): GlobalStats | null {
    return changetype<GlobalStats | null>(
      store.get("GlobalStats", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get totalExecutedBundlesCount(): BigInt {
    let value = this.get("totalExecutedBundlesCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalExecutedBundlesCount(value: BigInt) {
    this.set("totalExecutedBundlesCount", Value.fromBigInt(value));
  }

  get totalValidatorsPaid(): BigInt {
    let value = this.get("totalValidatorsPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalValidatorsPaid(value: BigInt) {
    this.set("totalValidatorsPaid", Value.fromBigInt(value));
  }

  get totalValidatorsCount(): BigInt {
    let value = this.get("totalValidatorsCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalValidatorsCount(value: BigInt) {
    this.set("totalValidatorsCount", Value.fromBigInt(value));
  }

  get totalUniqueSearchers(): BigInt {
    let value = this.get("totalUniqueSearchers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUniqueSearchers(value: BigInt) {
    this.set("totalUniqueSearchers", Value.fromBigInt(value));
  }

  get hourlyCollectionSnapshotGlobal(): HourlyCollectionSnapshotGlobalLoader {
    return new HourlyCollectionSnapshotGlobalLoader(
      "GlobalStats",
      this.get("id")!.toString(),
      "hourlyCollectionSnapshotGlobal"
    );
  }

  get dailyCollectionSnapshotGlobal(): DailyCollectionSnapshotGlobalLoader {
    return new DailyCollectionSnapshotGlobalLoader(
      "GlobalStats",
      this.get("id")!.toString(),
      "dailyCollectionSnapshotGlobal"
    );
  }

  get weeklyCollectionSnapshotGlobal(): WeeklyCollectionSnapshotGlobalLoader {
    return new WeeklyCollectionSnapshotGlobalLoader(
      "GlobalStats",
      this.get("id")!.toString(),
      "weeklyCollectionSnapshotGlobal"
    );
  }
}

export class HourlyCollectionSnapshotGlobal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlyCollectionSnapshotGlobal entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HourlyCollectionSnapshotGlobal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HourlyCollectionSnapshotGlobal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HourlyCollectionSnapshotGlobal | null {
    return changetype<HourlyCollectionSnapshotGlobal | null>(
      store.get_in_block("HourlyCollectionSnapshotGlobal", id)
    );
  }

  static load(id: string): HourlyCollectionSnapshotGlobal | null {
    return changetype<HourlyCollectionSnapshotGlobal | null>(
      store.get("HourlyCollectionSnapshotGlobal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get rangeVolume(): BigInt {
    let value = this.get("rangeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rangeVolume(value: BigInt) {
    this.set("rangeVolume", Value.fromBigInt(value));
  }

  get validators(): Array<Bytes> {
    let value = this.get("validators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set validators(value: Array<Bytes>) {
    this.set("validators", Value.fromBytesArray(value));
  }

  get rangeTransactions(): i32 {
    let value = this.get("rangeTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rangeTransactions(value: i32) {
    this.set("rangeTransactions", Value.fromI32(value));
  }

  get topBid(): BigInt {
    let value = this.get("topBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set topBid(value: BigInt) {
    this.set("topBid", Value.fromBigInt(value));
  }
}

export class DailyCollectionSnapshotGlobal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DailyCollectionSnapshotGlobal entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyCollectionSnapshotGlobal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyCollectionSnapshotGlobal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyCollectionSnapshotGlobal | null {
    return changetype<DailyCollectionSnapshotGlobal | null>(
      store.get_in_block("DailyCollectionSnapshotGlobal", id)
    );
  }

  static load(id: string): DailyCollectionSnapshotGlobal | null {
    return changetype<DailyCollectionSnapshotGlobal | null>(
      store.get("DailyCollectionSnapshotGlobal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get rangeVolume(): BigInt {
    let value = this.get("rangeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rangeVolume(value: BigInt) {
    this.set("rangeVolume", Value.fromBigInt(value));
  }

  get validators(): Array<Bytes> {
    let value = this.get("validators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set validators(value: Array<Bytes>) {
    this.set("validators", Value.fromBytesArray(value));
  }

  get rangeTransactions(): i32 {
    let value = this.get("rangeTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rangeTransactions(value: i32) {
    this.set("rangeTransactions", Value.fromI32(value));
  }

  get topBid(): BigInt {
    let value = this.get("topBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set topBid(value: BigInt) {
    this.set("topBid", Value.fromBigInt(value));
  }
}

export class WeeklyCollectionSnapshotGlobal extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WeeklyCollectionSnapshotGlobal entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WeeklyCollectionSnapshotGlobal must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WeeklyCollectionSnapshotGlobal", id.toString(), this);
    }
  }

  static loadInBlock(id: string): WeeklyCollectionSnapshotGlobal | null {
    return changetype<WeeklyCollectionSnapshotGlobal | null>(
      store.get_in_block("WeeklyCollectionSnapshotGlobal", id)
    );
  }

  static load(id: string): WeeklyCollectionSnapshotGlobal | null {
    return changetype<WeeklyCollectionSnapshotGlobal | null>(
      store.get("WeeklyCollectionSnapshotGlobal", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get rangeVolume(): BigInt {
    let value = this.get("rangeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rangeVolume(value: BigInt) {
    this.set("rangeVolume", Value.fromBigInt(value));
  }

  get validators(): Array<Bytes> {
    let value = this.get("validators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set validators(value: Array<Bytes>) {
    this.set("validators", Value.fromBytesArray(value));
  }

  get rangeTransactions(): i32 {
    let value = this.get("rangeTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rangeTransactions(value: i32) {
    this.set("rangeTransactions", Value.fromI32(value));
  }

  get topBid(): BigInt {
    let value = this.get("topBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set topBid(value: BigInt) {
    this.set("topBid", Value.fromBigInt(value));
  }
}

export class HourlyValidatorSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HourlyValidatorSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HourlyValidatorSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("HourlyValidatorSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HourlyValidatorSnapshot | null {
    return changetype<HourlyValidatorSnapshot | null>(
      store.get_in_block("HourlyValidatorSnapshot", id)
    );
  }

  static load(id: string): HourlyValidatorSnapshot | null {
    return changetype<HourlyValidatorSnapshot | null>(
      store.get("HourlyValidatorSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get rangeVolume(): BigInt {
    let value = this.get("rangeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rangeVolume(value: BigInt) {
    this.set("rangeVolume", Value.fromBigInt(value));
  }

  get rangeTransactions(): i32 {
    let value = this.get("rangeTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rangeTransactions(value: i32) {
    this.set("rangeTransactions", Value.fromI32(value));
  }

  get topBid(): BigInt {
    let value = this.get("topBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set topBid(value: BigInt) {
    this.set("topBid", Value.fromBigInt(value));
  }
}

export class DailyValidatorSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DailyValidatorSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyValidatorSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyValidatorSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyValidatorSnapshot | null {
    return changetype<DailyValidatorSnapshot | null>(
      store.get_in_block("DailyValidatorSnapshot", id)
    );
  }

  static load(id: string): DailyValidatorSnapshot | null {
    return changetype<DailyValidatorSnapshot | null>(
      store.get("DailyValidatorSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get rangeVolume(): BigInt {
    let value = this.get("rangeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rangeVolume(value: BigInt) {
    this.set("rangeVolume", Value.fromBigInt(value));
  }

  get rangeTransactions(): i32 {
    let value = this.get("rangeTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rangeTransactions(value: i32) {
    this.set("rangeTransactions", Value.fromI32(value));
  }

  get topBid(): BigInt {
    let value = this.get("topBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set topBid(value: BigInt) {
    this.set("topBid", Value.fromBigInt(value));
  }
}

export class WeeklyValidatorSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save WeeklyValidatorSnapshot entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WeeklyValidatorSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WeeklyValidatorSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): WeeklyValidatorSnapshot | null {
    return changetype<WeeklyValidatorSnapshot | null>(
      store.get_in_block("WeeklyValidatorSnapshot", id)
    );
  }

  static load(id: string): WeeklyValidatorSnapshot | null {
    return changetype<WeeklyValidatorSnapshot | null>(
      store.get("WeeklyValidatorSnapshot", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get rangeVolume(): BigInt {
    let value = this.get("rangeVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set rangeVolume(value: BigInt) {
    this.set("rangeVolume", Value.fromBigInt(value));
  }

  get validators(): Array<Bytes> {
    let value = this.get("validators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set validators(value: Array<Bytes>) {
    this.set("validators", Value.fromBytesArray(value));
  }

  get rangeTransactions(): i32 {
    let value = this.get("rangeTransactions");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rangeTransactions(value: i32) {
    this.set("rangeTransactions", Value.fromI32(value));
  }

  get topBid(): BigInt {
    let value = this.get("topBid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set topBid(value: BigInt) {
    this.set("topBid", Value.fromBigInt(value));
  }
}

export class Searcher extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Searcher entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Searcher must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Searcher", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Searcher | null {
    return changetype<Searcher | null>(
      store.get_in_block("Searcher", id.toHexString())
    );
  }

  static load(id: Bytes): Searcher | null {
    return changetype<Searcher | null>(store.get("Searcher", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get bundlesLanded(): BigInt {
    let value = this.get("bundlesLanded");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set bundlesLanded(value: BigInt) {
    this.set("bundlesLanded", Value.fromBigInt(value));
  }

  get totalTipped(): BigInt {
    let value = this.get("totalTipped");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTipped(value: BigInt) {
    this.set("totalTipped", Value.fromBigInt(value));
  }

  get lastBundleLandedTimestamp(): i32 {
    let value = this.get("lastBundleLandedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastBundleLandedTimestamp(value: i32) {
    this.set("lastBundleLandedTimestamp", Value.fromI32(value));
  }

  get bundles(): RelayFlashBidLoader {
    return new RelayFlashBidLoader(
      "Searcher",
      this.get("id")!.toString(),
      "bundles"
    );
  }
}

export class Validator extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Validator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Validator must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Validator", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Validator | null {
    return changetype<Validator | null>(
      store.get_in_block("Validator", id.toHexString())
    );
  }

  static load(id: Bytes): Validator | null {
    return changetype<Validator | null>(
      store.get("Validator", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get status(): string {
    let value = this.get("status");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set status(value: string) {
    this.set("status", Value.fromString(value));
  }

  get enabledAt(): i32 {
    let value = this.get("enabledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set enabledAt(value: i32) {
    this.set("enabledAt", Value.fromI32(value));
  }

  get disabledAt(): i32 {
    let value = this.get("disabledAt");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set disabledAt(value: i32) {
    this.set("disabledAt", Value.fromI32(value));
  }

  get totalTips(): BigInt {
    let value = this.get("totalTips");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalTips(value: BigInt) {
    this.set("totalTips", Value.fromBigInt(value));
  }

  get lastBundleReceivedTimestamp(): i32 {
    let value = this.get("lastBundleReceivedTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set lastBundleReceivedTimestamp(value: i32) {
    this.set("lastBundleReceivedTimestamp", Value.fromI32(value));
  }

  get hourlyValidatorSnapshot(): HourlyValidatorSnapshotLoader {
    return new HourlyValidatorSnapshotLoader(
      "Validator",
      this.get("id")!.toString(),
      "hourlyValidatorSnapshot"
    );
  }

  get dailyValidatorSnapshot(): DailyValidatorSnapshotLoader {
    return new DailyValidatorSnapshotLoader(
      "Validator",
      this.get("id")!.toString(),
      "dailyValidatorSnapshot"
    );
  }

  get weeklyValidatorSnapshot(): WeeklyValidatorSnapshotLoader {
    return new WeeklyValidatorSnapshotLoader(
      "Validator",
      this.get("id")!.toString(),
      "weeklyValidatorSnapshot"
    );
  }

  get bundles(): RelayFlashBidLoader {
    return new RelayFlashBidLoader(
      "Validator",
      this.get("id")!.toString(),
      "bundles"
    );
  }
}

export class RelayFlashBid extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save RelayFlashBid entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RelayFlashBid must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("RelayFlashBid", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RelayFlashBid | null {
    return changetype<RelayFlashBid | null>(
      store.get_in_block("RelayFlashBid", id.toHexString())
    );
  }

  static load(id: Bytes): RelayFlashBid | null {
    return changetype<RelayFlashBid | null>(
      store.get("RelayFlashBid", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get oppTxHash(): Bytes {
    let value = this.get("oppTxHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oppTxHash(value: Bytes) {
    this.set("oppTxHash", Value.fromBytes(value));
  }

  get validator(): Bytes {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set validator(value: Bytes) {
    this.set("validator", Value.fromBytes(value));
  }

  get searcherContractAddress(): Bytes {
    let value = this.get("searcherContractAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set searcherContractAddress(value: Bytes) {
    this.set("searcherContractAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class HourlyCollectionSnapshotGlobalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HourlyCollectionSnapshotGlobal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HourlyCollectionSnapshotGlobal[]>(value);
  }
}

export class DailyCollectionSnapshotGlobalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DailyCollectionSnapshotGlobal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DailyCollectionSnapshotGlobal[]>(value);
  }
}

export class WeeklyCollectionSnapshotGlobalLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): WeeklyCollectionSnapshotGlobal[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<WeeklyCollectionSnapshotGlobal[]>(value);
  }
}

export class RelayFlashBidLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): RelayFlashBid[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<RelayFlashBid[]>(value);
  }
}

export class HourlyValidatorSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HourlyValidatorSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HourlyValidatorSnapshot[]>(value);
  }
}

export class DailyValidatorSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): DailyValidatorSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<DailyValidatorSnapshot[]>(value);
  }
}

export class WeeklyValidatorSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): WeeklyValidatorSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<WeeklyValidatorSnapshot[]>(value);
  }
}
