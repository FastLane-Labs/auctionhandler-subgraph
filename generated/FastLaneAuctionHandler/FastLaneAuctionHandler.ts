// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RelayFlashBid extends ethereum.Event {
  get params(): RelayFlashBid__Params {
    return new RelayFlashBid__Params(this);
  }
}

export class RelayFlashBid__Params {
  _event: RelayFlashBid;

  constructor(event: RelayFlashBid) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oppTxHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get validator(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get searcherContractAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class RelayInitialized extends ethereum.Event {
  get params(): RelayInitialized__Params {
    return new RelayInitialized__Params(this);
  }
}

export class RelayInitialized__Params {
  _event: RelayInitialized;

  constructor(event: RelayInitialized) {
    this._event = event;
  }

  get initialStakeShare(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get minAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RelayMinAmountSet extends ethereum.Event {
  get params(): RelayMinAmountSet__Params {
    return new RelayMinAmountSet__Params(this);
  }
}

export class RelayMinAmountSet__Params {
  _event: RelayMinAmountSet;

  constructor(event: RelayMinAmountSet) {
    this._event = event;
  }

  get minAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class RelayPausedStateSet extends ethereum.Event {
  get params(): RelayPausedStateSet__Params {
    return new RelayPausedStateSet__Params(this);
  }
}

export class RelayPausedStateSet__Params {
  _event: RelayPausedStateSet;

  constructor(event: RelayPausedStateSet) {
    this._event = event;
  }

  get state(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class RelayProcessingPaidValidator extends ethereum.Event {
  get params(): RelayProcessingPaidValidator__Params {
    return new RelayProcessingPaidValidator__Params(this);
  }
}

export class RelayProcessingPaidValidator__Params {
  _event: RelayProcessingPaidValidator;

  constructor(event: RelayProcessingPaidValidator) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get validatorPayment(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get initiator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RelayProcessingWithdrewStakeShare extends ethereum.Event {
  get params(): RelayProcessingWithdrewStakeShare__Params {
    return new RelayProcessingWithdrewStakeShare__Params(this);
  }
}

export class RelayProcessingWithdrewStakeShare__Params {
  _event: RelayProcessingWithdrewStakeShare;

  constructor(event: RelayProcessingWithdrewStakeShare) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountWithdrawn(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RelayShareProposed extends ethereum.Event {
  get params(): RelayShareProposed__Params {
    return new RelayShareProposed__Params(this);
  }
}

export class RelayShareProposed__Params {
  _event: RelayShareProposed;

  constructor(event: RelayShareProposed) {
    this._event = event;
  }

  get amount(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get deadline(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RelayShareSet extends ethereum.Event {
  get params(): RelayShareSet__Params {
    return new RelayShareSet__Params(this);
  }
}

export class RelayShareSet__Params {
  _event: RelayShareSet;

  constructor(event: RelayShareSet) {
    this._event = event;
  }

  get amount(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RelaySimulatedFlashBid extends ethereum.Event {
  get params(): RelaySimulatedFlashBid__Params {
    return new RelaySimulatedFlashBid__Params(this);
  }
}

export class RelaySimulatedFlashBid__Params {
  _event: RelaySimulatedFlashBid;

  constructor(event: RelaySimulatedFlashBid) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get oppTxHash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get validator(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get searcherContractAddress(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class RelaySimulatorStateSet extends ethereum.Event {
  get params(): RelaySimulatorStateSet__Params {
    return new RelaySimulatorStateSet__Params(this);
  }
}

export class RelaySimulatorStateSet__Params {
  _event: RelaySimulatorStateSet;

  constructor(event: RelaySimulatorStateSet) {
    this._event = event;
  }

  get state(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class RelayValidatorDisabled extends ethereum.Event {
  get params(): RelayValidatorDisabled__Params {
    return new RelayValidatorDisabled__Params(this);
  }
}

export class RelayValidatorDisabled__Params {
  _event: RelayValidatorDisabled;

  constructor(event: RelayValidatorDisabled) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RelayValidatorEnabled extends ethereum.Event {
  get params(): RelayValidatorEnabled__Params {
    return new RelayValidatorEnabled__Params(this);
  }
}

export class RelayValidatorEnabled__Params {
  _event: RelayValidatorEnabled;

  constructor(event: RelayValidatorEnabled) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payee(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RelayValidatorPayeeUpdated extends ethereum.Event {
  get params(): RelayValidatorPayeeUpdated__Params {
    return new RelayValidatorPayeeUpdated__Params(this);
  }
}

export class RelayValidatorPayeeUpdated__Params {
  _event: RelayValidatorPayeeUpdated;

  constructor(event: RelayValidatorPayeeUpdated) {
    this._event = event;
  }

  get validator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get payee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get initiator(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RelayWithdrawDust extends ethereum.Event {
  get params(): RelayWithdrawDust__Params {
    return new RelayWithdrawDust__Params(this);
  }
}

export class RelayWithdrawDust__Params {
  _event: RelayWithdrawDust;

  constructor(event: RelayWithdrawDust) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RelayWithdrawStuckERC20 extends ethereum.Event {
  get params(): RelayWithdrawStuckERC20__Params {
    return new RelayWithdrawStuckERC20__Params(this);
  }
}

export class RelayWithdrawStuckERC20__Params {
  _event: RelayWithdrawStuckERC20;

  constructor(event: RelayWithdrawStuckERC20) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RelayWithdrawStuckNativeToken extends ethereum.Event {
  get params(): RelayWithdrawStuckNativeToken__Params {
    return new RelayWithdrawStuckNativeToken__Params(this);
  }
}

export class RelayWithdrawStuckNativeToken__Params {
  _event: RelayWithdrawStuckNativeToken;

  constructor(event: RelayWithdrawStuckNativeToken) {
    this._event = event;
  }

  get receiver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FastLaneAuctionHandler extends ethereum.SmartContract {
  static bind(address: Address): FastLaneAuctionHandler {
    return new FastLaneAuctionHandler("FastLaneAuctionHandler", address);
  }

  bid_simulator_enabled(): boolean {
    let result = super.call(
      "bid_simulator_enabled",
      "bid_simulator_enabled():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_bid_simulator_enabled(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "bid_simulator_enabled",
      "bid_simulator_enabled():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  flStakeSharePayable(): BigInt {
    let result = super.call(
      "flStakeSharePayable",
      "flStakeSharePayable():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_flStakeSharePayable(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "flStakeSharePayable",
      "flStakeSharePayable():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  flStakeShareRatio(): i32 {
    let result = super.call(
      "flStakeShareRatio",
      "flStakeShareRatio():(uint24)",
      []
    );

    return result[0].toI32();
  }

  try_flStakeShareRatio(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "flStakeShareRatio",
      "flStakeShareRatio():(uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  fulfilledAuctionsMap(param0: Bytes): BigInt {
    let result = super.call(
      "fulfilledAuctionsMap",
      "fulfilledAuctionsMap(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return result[0].toBigInt();
  }

  try_fulfilledAuctionsMap(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fulfilledAuctionsMap",
      "fulfilledAuctionsMap(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentStakeBalance(): BigInt {
    let result = super.call(
      "getCurrentStakeBalance",
      "getCurrentStakeBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentStakeBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentStakeBalance",
      "getCurrentStakeBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentStakeRatio(): i32 {
    let result = super.call(
      "getCurrentStakeRatio",
      "getCurrentStakeRatio():(uint24)",
      []
    );

    return result[0].toI32();
  }

  try_getCurrentStakeRatio(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getCurrentStakeRatio",
      "getCurrentStakeRatio():(uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getPendingDeadline(): BigInt {
    let result = super.call(
      "getPendingDeadline",
      "getPendingDeadline():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getPendingDeadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingDeadline",
      "getPendingDeadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPendingStakeRatio(): i32 {
    let result = super.call(
      "getPendingStakeRatio",
      "getPendingStakeRatio():(uint24)",
      []
    );

    return result[0].toI32();
  }

  try_getPendingStakeRatio(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "getPendingStakeRatio",
      "getPendingStakeRatio():(uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getValidatorBalance(_validator: Address): BigInt {
    let result = super.call(
      "getValidatorBalance",
      "getValidatorBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_validator)]
    );

    return result[0].toBigInt();
  }

  try_getValidatorBalance(_validator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getValidatorBalance",
      "getValidatorBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_validator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getValidatorPayee(_validator: Address): Address {
    let result = super.call(
      "getValidatorPayee",
      "getValidatorPayee(address):(address)",
      [ethereum.Value.fromAddress(_validator)]
    );

    return result[0].toAddress();
  }

  try_getValidatorPayee(_validator: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getValidatorPayee",
      "getValidatorPayee(address):(address)",
      [ethereum.Value.fromAddress(_validator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getValidatorRecipient(_validator: Address): Address {
    let result = super.call(
      "getValidatorRecipient",
      "getValidatorRecipient(address):(address)",
      [ethereum.Value.fromAddress(_validator)]
    );

    return result[0].toAddress();
  }

  try_getValidatorRecipient(_validator: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getValidatorRecipient",
      "getValidatorRecipient(address):(address)",
      [ethereum.Value.fromAddress(_validator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getValidatorStatus(_validator: Address): boolean {
    let result = super.call(
      "getValidatorStatus",
      "getValidatorStatus(address):(bool)",
      [ethereum.Value.fromAddress(_validator)]
    );

    return result[0].toBoolean();
  }

  try_getValidatorStatus(_validator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getValidatorStatus",
      "getValidatorStatus(address):(bool)",
      [ethereum.Value.fromAddress(_validator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  humanizeError(_errorData: Bytes): string {
    let result = super.call("humanizeError", "humanizeError(bytes):(string)", [
      ethereum.Value.fromBytes(_errorData)
    ]);

    return result[0].toString();
  }

  try_humanizeError(_errorData: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "humanizeError",
      "humanizeError(bytes):(string)",
      [ethereum.Value.fromBytes(_errorData)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isPayeeTimeLocked(_validator: Address): boolean {
    let result = super.call(
      "isPayeeTimeLocked",
      "isPayeeTimeLocked(address):(bool)",
      [ethereum.Value.fromAddress(_validator)]
    );

    return result[0].toBoolean();
  }

  try_isPayeeTimeLocked(_validator: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isPayeeTimeLocked",
      "isPayeeTimeLocked(address):(bool)",
      [ethereum.Value.fromAddress(_validator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidPayee(_validator: Address, _payee: Address): boolean {
    let result = super.call(
      "isValidPayee",
      "isValidPayee(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_validator),
        ethereum.Value.fromAddress(_payee)
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidPayee(
    _validator: Address,
    _payee: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidPayee",
      "isValidPayee(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_validator),
        ethereum.Value.fromAddress(_payee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minRelayBidAmount(): BigInt {
    let result = super.call(
      "minRelayBidAmount",
      "minRelayBidAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minRelayBidAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minRelayBidAmount",
      "minRelayBidAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  payValidator(_validator: Address): BigInt {
    let result = super.call("payValidator", "payValidator(address):(uint256)", [
      ethereum.Value.fromAddress(_validator)
    ]);

    return result[0].toBigInt();
  }

  try_payValidator(_validator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payValidator",
      "payValidator(address):(uint256)",
      [ethereum.Value.fromAddress(_validator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingStakeShareUpdate(): boolean {
    let result = super.call(
      "pendingStakeShareUpdate",
      "pendingStakeShareUpdate():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_pendingStakeShareUpdate(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "pendingStakeShareUpdate",
      "pendingStakeShareUpdate():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proposalDeadline(): BigInt {
    let result = super.call(
      "proposalDeadline",
      "proposalDeadline():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_proposalDeadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "proposalDeadline",
      "proposalDeadline():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proposalStakeShareRatio(): i32 {
    let result = super.call(
      "proposalStakeShareRatio",
      "proposalStakeShareRatio():(uint24)",
      []
    );

    return result[0].toI32();
  }

  try_proposalStakeShareRatio(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "proposalStakeShareRatio",
      "proposalStakeShareRatio():(uint24)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  validatorsBalanceMap(param0: Address): BigInt {
    let result = super.call(
      "validatorsBalanceMap",
      "validatorsBalanceMap(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_validatorsBalanceMap(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorsBalanceMap",
      "validatorsBalanceMap(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorsStatusMap(param0: Address): boolean {
    let result = super.call(
      "validatorsStatusMap",
      "validatorsStatusMap(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_validatorsStatusMap(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validatorsStatusMap",
      "validatorsStatusMap(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validatorsTotal(): BigInt {
    let result = super.call(
      "validatorsTotal",
      "validatorsTotal():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_validatorsTotal(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "validatorsTotal",
      "validatorsTotal():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _initialStakeShare(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _minRelayBidAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DisableRelayValidatorCall extends ethereum.Call {
  get inputs(): DisableRelayValidatorCall__Inputs {
    return new DisableRelayValidatorCall__Inputs(this);
  }

  get outputs(): DisableRelayValidatorCall__Outputs {
    return new DisableRelayValidatorCall__Outputs(this);
  }
}

export class DisableRelayValidatorCall__Inputs {
  _call: DisableRelayValidatorCall;

  constructor(call: DisableRelayValidatorCall) {
    this._call = call;
  }

  get _validator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DisableRelayValidatorCall__Outputs {
  _call: DisableRelayValidatorCall;

  constructor(call: DisableRelayValidatorCall) {
    this._call = call;
  }
}

export class EnableRelayValidatorCall extends ethereum.Call {
  get inputs(): EnableRelayValidatorCall__Inputs {
    return new EnableRelayValidatorCall__Inputs(this);
  }

  get outputs(): EnableRelayValidatorCall__Outputs {
    return new EnableRelayValidatorCall__Outputs(this);
  }
}

export class EnableRelayValidatorCall__Inputs {
  _call: EnableRelayValidatorCall;

  constructor(call: EnableRelayValidatorCall) {
    this._call = call;
  }

  get _validator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _payee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EnableRelayValidatorCall__Outputs {
  _call: EnableRelayValidatorCall;

  constructor(call: EnableRelayValidatorCall) {
    this._call = call;
  }
}

export class PayValidatorCall extends ethereum.Call {
  get inputs(): PayValidatorCall__Inputs {
    return new PayValidatorCall__Inputs(this);
  }

  get outputs(): PayValidatorCall__Outputs {
    return new PayValidatorCall__Outputs(this);
  }
}

export class PayValidatorCall__Inputs {
  _call: PayValidatorCall;

  constructor(call: PayValidatorCall) {
    this._call = call;
  }

  get _validator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class PayValidatorCall__Outputs {
  _call: PayValidatorCall;

  constructor(call: PayValidatorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RecoverDustCall extends ethereum.Call {
  get inputs(): RecoverDustCall__Inputs {
    return new RecoverDustCall__Inputs(this);
  }

  get outputs(): RecoverDustCall__Outputs {
    return new RecoverDustCall__Outputs(this);
  }
}

export class RecoverDustCall__Inputs {
  _call: RecoverDustCall;

  constructor(call: RecoverDustCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RecoverDustCall__Outputs {
  _call: RecoverDustCall;

  constructor(call: RecoverDustCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFastLaneStakeShareCall extends ethereum.Call {
  get inputs(): SetFastLaneStakeShareCall__Inputs {
    return new SetFastLaneStakeShareCall__Inputs(this);
  }

  get outputs(): SetFastLaneStakeShareCall__Outputs {
    return new SetFastLaneStakeShareCall__Outputs(this);
  }
}

export class SetFastLaneStakeShareCall__Inputs {
  _call: SetFastLaneStakeShareCall;

  constructor(call: SetFastLaneStakeShareCall) {
    this._call = call;
  }

  get _fastLaneStakeShare(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetFastLaneStakeShareCall__Outputs {
  _call: SetFastLaneStakeShareCall;

  constructor(call: SetFastLaneStakeShareCall) {
    this._call = call;
  }
}

export class SetMininumBidAmountCall extends ethereum.Call {
  get inputs(): SetMininumBidAmountCall__Inputs {
    return new SetMininumBidAmountCall__Inputs(this);
  }

  get outputs(): SetMininumBidAmountCall__Outputs {
    return new SetMininumBidAmountCall__Outputs(this);
  }
}

export class SetMininumBidAmountCall__Inputs {
  _call: SetMininumBidAmountCall;

  constructor(call: SetMininumBidAmountCall) {
    this._call = call;
  }

  get _minAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMininumBidAmountCall__Outputs {
  _call: SetMininumBidAmountCall;

  constructor(call: SetMininumBidAmountCall) {
    this._call = call;
  }
}

export class SetPausedStateCall extends ethereum.Call {
  get inputs(): SetPausedStateCall__Inputs {
    return new SetPausedStateCall__Inputs(this);
  }

  get outputs(): SetPausedStateCall__Outputs {
    return new SetPausedStateCall__Outputs(this);
  }
}

export class SetPausedStateCall__Inputs {
  _call: SetPausedStateCall;

  constructor(call: SetPausedStateCall) {
    this._call = call;
  }

  get _state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetPausedStateCall__Outputs {
  _call: SetPausedStateCall;

  constructor(call: SetPausedStateCall) {
    this._call = call;
  }
}

export class SetSimulatorStateCall extends ethereum.Call {
  get inputs(): SetSimulatorStateCall__Inputs {
    return new SetSimulatorStateCall__Inputs(this);
  }

  get outputs(): SetSimulatorStateCall__Outputs {
    return new SetSimulatorStateCall__Outputs(this);
  }
}

export class SetSimulatorStateCall__Inputs {
  _call: SetSimulatorStateCall;

  constructor(call: SetSimulatorStateCall) {
    this._call = call;
  }

  get _state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetSimulatorStateCall__Outputs {
  _call: SetSimulatorStateCall;

  constructor(call: SetSimulatorStateCall) {
    this._call = call;
  }
}

export class SimulateFlashBidCall extends ethereum.Call {
  get inputs(): SimulateFlashBidCall__Inputs {
    return new SimulateFlashBidCall__Inputs(this);
  }

  get outputs(): SimulateFlashBidCall__Outputs {
    return new SimulateFlashBidCall__Outputs(this);
  }
}

export class SimulateFlashBidCall__Inputs {
  _call: SimulateFlashBidCall;

  constructor(call: SimulateFlashBidCall) {
    this._call = call;
  }

  get _bidAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _oppTxHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _searcherToAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _searcherCallData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SimulateFlashBidCall__Outputs {
  _call: SimulateFlashBidCall;

  constructor(call: SimulateFlashBidCall) {
    this._call = call;
  }
}

export class SubmitFlashBidCall extends ethereum.Call {
  get inputs(): SubmitFlashBidCall__Inputs {
    return new SubmitFlashBidCall__Inputs(this);
  }

  get outputs(): SubmitFlashBidCall__Outputs {
    return new SubmitFlashBidCall__Outputs(this);
  }
}

export class SubmitFlashBidCall__Inputs {
  _call: SubmitFlashBidCall;

  constructor(call: SubmitFlashBidCall) {
    this._call = call;
  }

  get _bidAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _oppTxHash(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _searcherToAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _searcherCallData(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SubmitFlashBidCall__Outputs {
  _call: SubmitFlashBidCall;

  constructor(call: SubmitFlashBidCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TriggerPendingStakeShareUpdateCall extends ethereum.Call {
  get inputs(): TriggerPendingStakeShareUpdateCall__Inputs {
    return new TriggerPendingStakeShareUpdateCall__Inputs(this);
  }

  get outputs(): TriggerPendingStakeShareUpdateCall__Outputs {
    return new TriggerPendingStakeShareUpdateCall__Outputs(this);
  }
}

export class TriggerPendingStakeShareUpdateCall__Inputs {
  _call: TriggerPendingStakeShareUpdateCall;

  constructor(call: TriggerPendingStakeShareUpdateCall) {
    this._call = call;
  }
}

export class TriggerPendingStakeShareUpdateCall__Outputs {
  _call: TriggerPendingStakeShareUpdateCall;

  constructor(call: TriggerPendingStakeShareUpdateCall) {
    this._call = call;
  }
}

export class UpdateValidatorPayeeCall extends ethereum.Call {
  get inputs(): UpdateValidatorPayeeCall__Inputs {
    return new UpdateValidatorPayeeCall__Inputs(this);
  }

  get outputs(): UpdateValidatorPayeeCall__Outputs {
    return new UpdateValidatorPayeeCall__Outputs(this);
  }
}

export class UpdateValidatorPayeeCall__Inputs {
  _call: UpdateValidatorPayeeCall;

  constructor(call: UpdateValidatorPayeeCall) {
    this._call = call;
  }

  get _validator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _payee(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateValidatorPayeeCall__Outputs {
  _call: UpdateValidatorPayeeCall;

  constructor(call: UpdateValidatorPayeeCall) {
    this._call = call;
  }
}

export class WithdrawStakeShareCall extends ethereum.Call {
  get inputs(): WithdrawStakeShareCall__Inputs {
    return new WithdrawStakeShareCall__Inputs(this);
  }

  get outputs(): WithdrawStakeShareCall__Outputs {
    return new WithdrawStakeShareCall__Outputs(this);
  }
}

export class WithdrawStakeShareCall__Inputs {
  _call: WithdrawStakeShareCall;

  constructor(call: WithdrawStakeShareCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WithdrawStakeShareCall__Outputs {
  _call: WithdrawStakeShareCall;

  constructor(call: WithdrawStakeShareCall) {
    this._call = call;
  }
}

export class WithdrawStuckERC20Call extends ethereum.Call {
  get inputs(): WithdrawStuckERC20Call__Inputs {
    return new WithdrawStuckERC20Call__Inputs(this);
  }

  get outputs(): WithdrawStuckERC20Call__Outputs {
    return new WithdrawStuckERC20Call__Outputs(this);
  }
}

export class WithdrawStuckERC20Call__Inputs {
  _call: WithdrawStuckERC20Call;

  constructor(call: WithdrawStuckERC20Call) {
    this._call = call;
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawStuckERC20Call__Outputs {
  _call: WithdrawStuckERC20Call;

  constructor(call: WithdrawStuckERC20Call) {
    this._call = call;
  }
}

export class WithdrawStuckNativeTokenCall extends ethereum.Call {
  get inputs(): WithdrawStuckNativeTokenCall__Inputs {
    return new WithdrawStuckNativeTokenCall__Inputs(this);
  }

  get outputs(): WithdrawStuckNativeTokenCall__Outputs {
    return new WithdrawStuckNativeTokenCall__Outputs(this);
  }
}

export class WithdrawStuckNativeTokenCall__Inputs {
  _call: WithdrawStuckNativeTokenCall;

  constructor(call: WithdrawStuckNativeTokenCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawStuckNativeTokenCall__Outputs {
  _call: WithdrawStuckNativeTokenCall;

  constructor(call: WithdrawStuckNativeTokenCall) {
    this._call = call;
  }
}
